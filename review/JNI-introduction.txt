# name: Ruian Duan
# date: 09/24/2014

1. what's the problem?
Android on x86: Java Native Interface and the Android Native Development Kit
http://www.drdobbs.com/architecture-and-design/android-on-x86-java-native-interface-and/240166271

2. why should we care?
It is difficult to take advantage of locally based instructions to run a huge existing software library, and thus functionality and performance are limited.

3. what's the key idea to solve this problem?
JNI usually has two usage scenarios: first, to be able to use legacy code (for example C/C++, Delphi, and other development tools); second, to more directly interact with the hardware for better performance. We will see some of this as we go through the article.
Java to C type mapping.

4. how can we believe their solution?
NDK Introduction. Benefits
Performance improvement through using native code to develop any part of the program that requires high performance, and also by directly accessing the CPU and hardware. 
The ability to reuse existing native code.

5. anything surprising?
Projects developed with the NDK have components: android manifest, dalvik classes, resource bundle, libraries & JNI

Application Binary Interface (ABI)
	armeabi: This is the ABI name for the ARM CPU, which supports at least the ARMv5TE instruction set.
	armeabi-v7a: This is another ABI name for ARM-based CPUs; it extends the armeabi CPU instruction set extensions, such as Thumb-2 instruction set extensions, floating-point processing unit directives for vector floating-point hardware.
	x86: This is ABI name generally known for the support of x86 or IA-32 instruction set of the CPU. More specifically, its target is often referred to in the following sessions as i686 or Pentium Pro instruction set. Intel Atom processors belong to this ABI type.

This article is based on material found in the book Android on x86: an Introduction to Optimizing for Intel Architecture by Iggy Krajci and Darren Cummings.
